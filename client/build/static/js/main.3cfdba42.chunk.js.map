{"version":3,"sources":["LoginScreen/LoginScreen.js","SelectionScreen/SelectionScreen.js","CreateScreen/CreateScreen.js","RoomMiniature/RoomMiniature.js","JoinScreen/JoinScreen.js","LobbyPlayer/LobbyPlayer.js","LobbyScreen/LobbyScreen.js","EnemyPlayer/EnemyPlayer.js","GameScreen/GameScreen.js","App.js","serviceWorker.js","index.js"],"names":["LoginScreen","react_default","a","createElement","className","onSubmit","this","props","handleSubmit","autoFocus","type","name","value","playerName","onChange","handleChange","Component","SelectionScreen","react_router_dom","to","CreateScreen","roomName","RoomMiniature","_this","onClick","joinRoom","room","numPlayers","JoinScreen","renderRooms","rooms","length","map","RoomMiniature_RoomMiniature_RoomMiniature","key","LobbyPlayer","player","playerReady","LobbyScreen","renderPlayers","players","LobbyPlayer_LobbyPlayer_LobbyPlayer","_this2","handlePlayerReady","EnemyPlayer","handCards","weapon","life","baseDistance","distance","GameScreen","EnemyPlayer_EnemyPlayer_EnemyPlayer","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","emitter","event","message","state","socket","emit","listener","handler","on","updatePlayerStateProperty","property","next","setState","prevState","objectSpread","defineProperty","handleLoginInput","target","handleRoomInput","handleLoginSubmit","trim","loggedIn","preventDefault","handleRoomSubmit","joinedRoom","handleJoinRoom","off","renderScreen","condition","redirectUrl","component","react_router","io","gameStarted","playerNumber","role","character","description","viewDistance","playedCards","playerTurn","waitingOponentAction","window","addEventListener","_this3","exact","path","render","LoginScreen_LoginScreen_LoginScreen","CreateScreen_CreateScreen_CreateScreen","JoinScreen_JoinScreen_JoinScreen","LobbyScreen_LobbyScreen_LobbyScreen","GameScreen_GameScreen_GameScreen","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3cfdba42.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './LoginScreen.css'\r\n\r\nexport default class LoginScreen extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"LoginScreen\">\r\n                <form onSubmit={this.props.handleSubmit}>\r\n                    <label className=\"Label\">\r\n                        What is your name?\r\n                        <input \r\n                            autoFocus\r\n                            type=\"text\" \r\n                            className=\"Input\" \r\n                            name=\"playerName\"\r\n                            value={this.props.playerName} \r\n                            onChange={this.props.handleChange} />\r\n                    </label>\r\n                    <button type=\"submit\" className=\"Button\">Continue</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './SelectionScreen.css'\r\n\r\nexport default class SelectionScreen extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"SelectionScreen\">\r\n                <Link to=\"/create\" className=\"Link\">CREAR</Link>\r\n                <Link to=\"/join\" className=\"Link\">UNIRSE</Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './CreateScreen.css'\r\n\r\nexport default class CreateScreen extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"CreateScreen\">\r\n                <form onSubmit={this.props.handleSubmit}>\r\n                    <label className=\"Label\">\r\n                        What is the room's name going to be?\r\n                        <input\r\n                            autoFocus\r\n                            type=\"text\"\r\n                            className=\"Input\"\r\n                            name=\"roomName\"\r\n                            value={this.props.roomName}\r\n                            onChange={this.props.handleChange} />\r\n                    </label>\r\n                    <button type=\"submit\" className=\"Button\">Continue</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './RoomMiniature.css'\r\n\r\nexport default class RoomMiniature extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"RoomMiniature\" onClick={() => this.props.joinRoom(this.props.room.roomName)}>\r\n                <h3 className=\"RoomMiniatureTitle\">{this.props.room.roomName}</h3>\r\n                <p className=\"RoomMiniatureText\">Current players | <span className=\"RoomMiniatureNumber\">{this.props.room.numPlayers}</span></p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport RoomMiniature from '../RoomMiniature/RoomMiniature';\r\nimport './JoinScreen.css'\r\n\r\nexport default class JoinScreen extends Component {\r\n    renderRooms = (rooms) => {\r\n        if(rooms.length) {\r\n            return rooms.map((room) => <RoomMiniature room={room} key={room.roomName} joinRoom={this.props.joinRoom} />);\r\n        } else {\r\n            return 'No hay salas';\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"JoinScreen\">\r\n                {this.renderRooms(this.props.rooms)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './LobbyPlayer.css'\r\n\r\nexport default class LobbyPlayer extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Text\">\r\n                {this.props.player.playerName}\r\n                <span className=\"Text-RightAlignment\">\r\n                    {this.props.player.playerReady ? 'Ready' : 'Not Ready'}\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport LobbyPlayer from '../LobbyPlayer/LobbyPlayer';\r\nimport './LobbyScreen.css'\r\n\r\nexport default class LobbyScreen extends Component {\r\n    renderPlayers = () => {\r\n        return this.props.players.map((player) => <LobbyPlayer player={player} />)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"LobbyScreen\">\r\n                <h1>{this.props.roomName}</h1>\r\n                <LobbyPlayer player={this.props.player} />\r\n                {this.renderPlayers()}\r\n                <button onClick={() => this.props.handlePlayerReady(this.props.roomName, this.props.player.playerReady)} className=\"Button\">Listo</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './EnemyPlayer.css'\r\n\r\nexport default class EnemyPlayer extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"EnemyPlayer\">\r\n                <p className=\"EnemyPlayerName\">{this.props.player.playerName}</p>\r\n                <p className=\"EnemyPlayerText\">\r\n                    Cards: <span className=\"EnemyPlayerText-Bold\">{this.props.player.handCards}</span>\r\n                     | Weapon: <span className=\"EnemyPlayerText-Bold\">{this.props.player.weapon}</span>\r\n                     | Life: <span className=\"EnemyPlayerText-Bold\">{this.props.player.life}</span>\r\n                     | Distance: <span className=\"EnemyPlayerText-Bold\">{this.props.player.baseDistance + this.props.player.distance}</span>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport EnemyPlayer from '../EnemyPlayer/EnemyPlayer';\r\nimport './GameScreen.css'\r\n\r\nexport default class GameScreen extends Component {\r\n    renderPlayers = () => {\r\n        return this.props.players.map((player) => <EnemyPlayer player={player} />)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"GameScreen\">\r\n                {this.renderPlayers()}\r\n                <div>\r\n                    AQUÍ VAS TÚ\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","/* eslint-disable react/jsx-no-comment-textnodes */\r\nimport React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\r\nimport io from 'socket.io-client';\r\nimport LoginScreen from './LoginScreen/LoginScreen';\r\nimport SelectionScreen from './SelectionScreen/SelectionScreen';\r\nimport CreateScreen from './CreateScreen/CreateScreen';\r\nimport JoinScreen from './JoinScreen/JoinScreen';\r\nimport LobbyScreen from './LobbyScreen/LobbyScreen';\r\nimport GameScreen from './GameScreen/GameScreen';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      socket: io(),\r\n      joinedRoom: false,\r\n      loggedIn: false,\r\n      gameStarted: false,\r\n      roomName: '',\r\n      rooms: [],\r\n      player: {\r\n        playerName: '',\r\n        playerNumber: 0,\r\n        life: 0,\r\n        role: '',\r\n        character: {\r\n          name: '',\r\n          description: '',\r\n        },\r\n        distance: 0,\r\n        viewDistance: 1,\r\n        baseDistance: 1,\r\n        weapon: 0,\r\n        handCards: [],\r\n        playedCards: [],\r\n        playerReady: false,\r\n        playerTurn: false,\r\n        waitingOponentAction: false,\r\n      },\r\n      players: [],\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.listener('updateGameState', (state) => this.setState({ player: state.player, players: state.players }));\r\n    this.listener('listRooms', (rooms) => this.setState({ rooms }));\r\n    this.listener('startGame', (gameStarted) => this.setState({ gameStarted }));\r\n    window.addEventListener('beforeunload', () => this.emitter('closingConnection', this.state.roomName));\r\n  }\r\n\r\n  emitter = (event, message) => {\r\n    this.state.socket.emit(event, message);\r\n  }\r\n\r\n  listener = (event, handler) => {\r\n    this.state.socket.on(event, handler);\r\n  }\r\n\r\n  updatePlayerStateProperty = (property, value, next) => {\r\n    this.setState(prevState => ({\r\n      player: {\r\n        ...prevState.player,\r\n        [property]: value\r\n      }\r\n    }), next);\r\n  }\r\n\r\n  handleLoginInput = (event) => {\r\n    this.updatePlayerStateProperty(event.target.name, event.target.value);\r\n  }\r\n\r\n  handleRoomInput = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  }\r\n\r\n  handleLoginSubmit = (event) => {\r\n    if(this.state.player.playerName.length > 0) {\r\n        this.emitter('addPlayer', this.state.player.playerName.trim());\r\n        this.setState({ loggedIn: true });\r\n        event.preventDefault();\r\n    }\r\n  }\r\n\r\n  handleRoomSubmit = (event) => {\r\n    if(this.state.roomName.length > 0) {\r\n      this.emitter('createRoom', this.state.roomName.trim());\r\n      this.setState({ joinedRoom: true });\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  handleJoinRoom = (roomName) => {\r\n    this.state.socket.off('listRooms');\r\n    this.setState({ roomName, joinedRoom: true }, () => this.emitter('joinRoom', this.state.roomName));\r\n  }\r\n\r\n  handlePlayerReady = (roomName, playerReady) => {\r\n    this.emitter('playerReady', { roomName, playerReady });\r\n  }\r\n\r\n  /**\r\n   * Chooses the right path to display based on a set condition.\r\n   * @param condition The condition that chooses if true to redirect, and if false to render the component associated to the current path.\r\n   * @param redirectUrl The url to redirect.\r\n   * @param component The component to be rendered in this path.\r\n   */\r\n  renderScreen = (condition, redirectUrl, component) => {\r\n    if(condition) {\r\n      return <Redirect to={redirectUrl} />\r\n    } else {\r\n      return component;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <Route exact path=\"/\" render={() => this.renderScreen(this.state.loggedIn, '/select', \r\n          <LoginScreen playerName={this.state.player.playerName} handleSubmit={this.handleLoginSubmit} handleChange={this.handleLoginInput} />\r\n          )}/>\r\n        <Route exact path=\"/select\" component={SelectionScreen} />\r\n        <Route exact path=\"/create\" render={() => this.renderScreen(this.state.joinedRoom, '/lobby', \r\n          <CreateScreen roomName={this.state.roomName} handleSubmit={this.handleRoomSubmit} handleChange={this.handleRoomInput} />\r\n          )} />\r\n        <Route exact path=\"/join\" render={() => this.renderScreen(this.state.joinedRoom, '/lobby',\r\n          <JoinScreen rooms={this.state.rooms} joinRoom={this.handleJoinRoom} />\r\n          )} />\r\n        <Route exact path=\"/lobby\" render={() => this.renderScreen(this.state.gameStarted, '/game',        \r\n          <LobbyScreen roomName={this.state.roomName} players={this.state.players} player={this.state.player} handlePlayerReady={this.handlePlayerReady}/>\r\n          )} />\r\n        <Route exact path=\"/game\" render={() => <GameScreen player={this.state.player} players={this.state.players} />} />\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}