{"version":3,"sources":["LoginScreen/LoginScreen.js","SelectionScreen/SelectionScreen.js","CreateScreen/CreateScreen.js","RoomMiniature/RoomMiniature.js","JoinScreen/JoinScreen.js","LobbyScreen/LobbyScreen.js","App.js","serviceWorker.js","index.js"],"names":["LoginScreen","react_default","a","createElement","className","onSubmit","this","props","handleSubmit","type","name","value","playerName","onChange","handleChange","Component","SelectionScreen","react_router_dom","to","CreateScreen","roomName","RoomMiniature","_this","onClick","joinRoom","room","numPlayers","JoinScreen","renderRooms","rooms","map","RoomMiniature_RoomMiniature","key","listenForRooms","askForRooms","LobbyScreen","renderPlayers","players","player","listenForPlayers","askForPlayers","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","emitter","event","message","state","socket","emit","listener","handler","on","handleWindowClose","setState","defineProperty","target","handleLoginSubmit","length","trim","loggedIn","preventDefault","handleRoomSubmit","joinedRoom","handleJoinRoom","updateRooms","JSON","stringify","updatePlayers","renderScreen","condition","redirectUrl","component","react_router","playerReady","playerUnready","io","_this2","window","addEventListener","console","log","_this3","exact","path","render","LoginScreen_LoginScreen_LoginScreen","CreateScreen_CreateScreen_CreateScreen","JoinScreen_JoinScreen","LobbyScreen_LobbyScreen","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.43a67f4e.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './LoginScreen.css'\r\n\r\nexport default class LoginScreen extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"LoginScreen\">\r\n                <form onSubmit={this.props.handleSubmit}>\r\n                    <label className=\"Label\">\r\n                        What is your name?\r\n                        <input \r\n                            type=\"text\" \r\n                            className=\"Input\" \r\n                            name=\"playerName\"\r\n                            value={this.props.playerName} \r\n                            onChange={this.props.handleChange} />\r\n                    </label>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './SelectionScreen.css'\r\n\r\nexport default class SelectionScreen extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"SelectionScreen\">\r\n                <Link to=\"/create\" className=\"Link\">CREAR</Link>\r\n                <Link to=\"/join\" className=\"Link\">UNIRSE</Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './CreateScreen.css'\r\n\r\nexport default class CreateScreen extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"CreateScreen\">\r\n                <form onSubmit={this.props.handleSubmit}>\r\n                    <label className=\"Label\">\r\n                        What is the room's name going to be?\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"Input\"\r\n                            name=\"roomName\"\r\n                            value={this.props.roomName}\r\n                            onChange={this.props.handleChange} />\r\n                    </label>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './RoomMiniature'\r\n\r\nexport default class RoomMiniature extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"RoomMiniature\" onClick={() => this.props.joinRoom(this.props.room.roomName)}>\r\n                Name: {this.props.room.roomName} | Players: {this.props.room.numPlayers}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport RoomMiniature from '../RoomMiniature/RoomMiniature';\r\n\r\nexport default class JoinScreen extends Component {\r\n    componentDidMount() {\r\n        this.props.listenForRooms();\r\n        this.props.askForRooms();\r\n    }\r\n\r\n    /**\r\n     * Renders the rooms list.\r\n     */\r\n    renderRooms = () => {\r\n        return this.props.rooms.map((room) => <RoomMiniature room={room} key={room.roomName} joinRoom={this.props.joinRoom} />)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderRooms()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './LobbyScreen'\r\n\r\nexport default class LobbyScreen extends Component {\r\n    componentDidMount() {\r\n        this.props.listenForPlayers();\r\n        this.props.askForPlayers();\r\n    }\r\n\r\n    /**\r\n     * Renders the players list.\r\n     */\r\n    renderPlayers = () => {\r\n        return this.props.players.map((player) => <p>{player.playerName}</p>)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"LobbyScreen\">\r\n                LOBBY SCREEN\r\n                Players:\r\n                {this.renderPlayers()}\r\n                <button>Listo</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","/* eslint-disable react/jsx-no-comment-textnodes */\r\nimport React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\r\nimport './App.css';\r\nimport io from 'socket.io-client';\r\nimport LoginScreen from './LoginScreen/LoginScreen';\r\nimport SelectionScreen from './SelectionScreen/SelectionScreen';\r\nimport CreateScreen from './CreateScreen/CreateScreen';\r\nimport JoinScreen from './JoinScreen/JoinScreen';\r\nimport LobbyScreen from './LobbyScreen/LobbyScreen';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      socket: io(),\r\n      playerName: '',\r\n      loggedIn: false,\r\n      roomName: '',\r\n      joinedRoom: false,\r\n      rooms: [],\r\n      players: [],\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('beforeunload', () => {\r\n      this.handleWindowClose();\r\n      console.log(this.state.roomName)\r\n    });\r\n  }\r\n\r\n  emitter = (event, message) => {\r\n    this.state.socket.emit(event, message);\r\n  }\r\n\r\n  listener = (event, handler) => {\r\n    this.state.socket.on(event, handler);\r\n  }\r\n\r\n  handleWindowClose = () => {\r\n    this.emitter('closingConnection', this.state.roomName);\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  }\r\n\r\n  handleLoginSubmit = (event) => {\r\n    if(this.state.playerName.length > 0) {\r\n        this.emitter('addPlayer', this.state.playerName.trim());\r\n        this.setState({ loggedIn: true });\r\n        event.preventDefault();\r\n    }\r\n  }\r\n\r\n  handleRoomSubmit = (event) => {\r\n    if(this.state.roomName.length > 0) {\r\n      this.emitter('createRoom', this.state.roomName.trim());\r\n      this.setState({ joinedRoom: true });\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  handleJoinRoom = (roomName) => {\r\n    this.setState({ roomName, joinedRoom: true });\r\n  }\r\n\r\n  /**\r\n   * Emits an event to trigger a response from the server.\r\n   */\r\n  askForRooms = () => {\r\n    this.emitter('listRooms');\r\n  }\r\n\r\n  /**\r\n   * Listens for a list of all the playable rooms.\r\n   */\r\n  listenForRooms = () => {\r\n    this.listener('listRooms', this.updateRooms)\r\n  }\r\n\r\n  /**\r\n   * Updates the component's state with the new rooms list.\r\n   * @returns [ room: { roomName, numPlayers } ]\r\n   */\r\n  updateRooms = rooms => {\r\n    this.emitter('logger', 'Rooms received' + JSON.stringify(rooms));\r\n    this.setState({ rooms });\r\n  }\r\n\r\n  /**\r\n   * Emits an event to trigger a response from the server.\r\n   */\r\n  askForPlayers = () => {\r\n    this.emitter('joinRoom', this.state.roomName);\r\n  }\r\n\r\n  /**\r\n   * Listens for an update on the player's list.\r\n   */\r\n  listenForPlayers = () => {\r\n    this.listener('updatePlayers', this.updatePlayers)\r\n  }\r\n\r\n  /**\r\n   * Updates the component's state with the new rooms list.\r\n   * @returns [ room: { roomName, numPlayers } ]\r\n   */\r\n  updatePlayers = players => {\r\n    this.emitter('logger', 'Players received' + JSON.stringify(players));\r\n    this.setState({ players })\r\n  }\r\n\r\n  /**\r\n   * Chooses the right path to display based on a set condition.\r\n   * @param condition The condition that chooses if true to redirect, and if false to render the component associated to the current path.\r\n   * @param redirectUrl The url to redirect.\r\n   * @param component The component to be rendered in this path.\r\n   */\r\n  renderScreen = (condition, redirectUrl, component) => {\r\n    if(condition) {\r\n      return <Redirect to={redirectUrl} />\r\n    } else {\r\n      return component;\r\n    }\r\n  }\r\n\r\n  playerReady = () => {\r\n    \r\n  }\r\n\r\n  playerUnready = () => {\r\n    \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <Route exact path=\"/\" render={() => this.renderScreen(this.state.loggedIn, '/select', \r\n          <LoginScreen playerName={this.state.playerName} handleSubmit={this.handleLoginSubmit} handleChange={this.handleChange} />\r\n          )}/>\r\n        <Route exact path=\"/select\" component={SelectionScreen} />\r\n        <Route exact path=\"/create\" render={() => this.renderScreen(this.state.joinedRoom, '/lobby', \r\n          <CreateScreen roomName={this.state.roomName} handleSubmit={this.handleRoomSubmit} handleChange={this.handleChange} />\r\n          )} />\r\n        <Route exact path=\"/join\" render={() => this.renderScreen(this.state.joinedRoom, '/lobby',\r\n          <JoinScreen listenForRooms={this.listenForRooms} askForRooms={this.askForRooms} rooms={this.state.rooms} joinRoom={this.handleJoinRoom} />\r\n          )} />\r\n        <Route exact path=\"/lobby\" render={() => <LobbyScreen listenForPlayers={this.listenForPlayers} askForPlayers={this.askForPlayers} players={this.state.players} />} />\r\n        <Route exact path=\"/game\" render={() => <LobbyScreen emitter={this.emitter} listener={this.listener} />} />\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}