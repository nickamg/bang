{"version":3,"sources":["LoginScreen/LoginScreen.js","SelectionScreen/SelectionScreen.js","CreateScreen/CreateScreen.js","RoomMiniature/RoomMiniature.js","JoinScreen/JoinScreen.js","LobbyScreen/LobbyScreen.js","App.js","serviceWorker.js","index.js"],"names":["LoginScreen","react_default","a","createElement","className","onSubmit","this","props","handleSubmit","type","name","value","playerName","onChange","handleChange","Component","SelectionScreen","react_router_dom","to","CreateScreen","roomName","RoomMiniature","_this","onClick","joinRoom","room","numPlayers","JoinScreen","renderRooms","rooms","map","RoomMiniature_RoomMiniature","key","listenForRooms","askForRooms","LobbyScreen","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","emitter","listener","App","event","message","socket","emit","handler","on","setState","defineProperty","target","handleLoginSubmit","length","trim","loggedIn","preventDefault","handleRoomSubmit","joinedRoom","handleJoinRoom","updateRooms","JSON","stringify","updatePlayers","renderScreen","condition","redirectUrl","component","react_router","io","players","_this2","exact","path","render","LoginScreen_LoginScreen_LoginScreen","CreateScreen_CreateScreen_CreateScreen","JoinScreen_JoinScreen","LobbyScreen_LobbyScreen","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8330260b.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './LoginScreen.css'\r\n\r\nexport default class LoginScreen extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"LoginScreen\">\r\n                <form onSubmit={this.props.handleSubmit}>\r\n                    <label className=\"Label\">\r\n                        What is your name?\r\n                        <input \r\n                            type=\"text\" \r\n                            className=\"Input\" \r\n                            name=\"playerName\"\r\n                            value={this.props.playerName} \r\n                            onChange={this.props.handleChange} />\r\n                    </label>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default class SelectionScreen extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Link to=\"/create\">CREAR</Link>\r\n                <br/>\r\n                <Link to=\"/join\">UNIRSE</Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './CreateScreen.css'\r\n\r\nexport default class CreateScreen extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"CreateScreen\">\r\n                <form onSubmit={this.props.handleSubmit}>\r\n                    <label className=\"Label\">\r\n                        What is the room's name going to be?\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"Input\"\r\n                            name=\"roomName\"\r\n                            value={this.props.roomName}\r\n                            onChange={this.props.handleChange} />\r\n                    </label>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './RoomMiniature'\r\n\r\nexport default class RoomMiniature extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"RoomMiniature\" onClick={() => this.props.joinRoom(this.props.room.roomName)}>\r\n                Name: {this.props.room.roomName} | Players: {this.props.room.numPlayers}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport RoomMiniature from '../RoomMiniature/RoomMiniature';\r\n\r\nexport default class JoinScreen extends Component {\r\n    componentDidMount() {\r\n        this.props.listenForRooms();\r\n        this.props.askForRooms();\r\n    }\r\n\r\n    /**\r\n     * Renders the rooms list.\r\n     */\r\n    renderRooms = () => {\r\n        return this.props.rooms.map((room) => <RoomMiniature room={room} key={room.roomName} joinRoom={this.props.joinRoom} />)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderRooms()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class LobbyScreen extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          \r\n        }\r\n      }\r\n\r\n    componentDidMount() {\r\n        this.props.emitter('joinRoom')\r\n        this.props.listener('joined')\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                LOBBY SCREEN\r\n                Players: ******\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","/* eslint-disable react/jsx-no-comment-textnodes */\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\nimport './App.css';\nimport io from 'socket.io-client';\nimport LoginScreen from './LoginScreen/LoginScreen';\nimport SelectionScreen from './SelectionScreen/SelectionScreen';\nimport CreateScreen from './CreateScreen/CreateScreen';\nimport JoinScreen from './JoinScreen/JoinScreen';\nimport LobbyScreen from './LobbyScreen/LobbyScreen';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      socket: io(),\n      playerName: '',\n      loggedIn: false,\n      roomName: '',\n      joinedRoom: false,\n      rooms: [],\n      players: [],\n    }\n  }\n\n  emitter = (event, message) => {\n    this.state.socket.emit(event, message);\n  }\n\n  listener = (event, handler) => {\n    this.state.socket.on(event, handler);\n  }\n\n  handleChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  handleLoginSubmit = (event) => {\n    if(this.state.playerName.length > 0) {\n        this.emitter('addPlayer', this.state.playerName.trim());\n        this.setState({ loggedIn: true });\n        event.preventDefault();\n    }\n  }\n\n  handleRoomSubmit = (event) => {\n    if(this.state.roomName.length > 0) {\n      this.emitter('createRoom', this.state.roomName.trim());\n      this.setState({ joinedRoom: true });\n      event.preventDefault();\n    }\n  }\n\n  handleJoinRoom = (roomName) => {\n    this.emitter('joinRoom', roomName);\n    this.setState({ joinedRoom: true });\n  }\n\n  /**\n   * Emits an event to trigger a response from the server.\n   */\n  askForRooms = () => {\n    this.emitter('listRooms');\n  }\n\n  /**\n   * Listens for a list of all the playable rooms.\n   */\n  listenForRooms = () => {\n    this.listener('listRooms', this.updateRooms)\n  }\n\n  /**\n   * Updates the component's state with the new rooms list.\n   * @returns [ room: { roomName, numPlayers } ]\n   */\n  updateRooms = rooms => {\n    this.emitter('logger', 'Rooms received' + JSON.stringify(rooms));\n    this.setState({ rooms });\n  }\n\n  updatePlayers = () => {\n    //TODO Update players state for gameplay\n  }\n\n  /**\n   * Chooses the right path to display based on a set condition.\n   * @param condition The condition that chooses if true to redirect, and if false to render the component associated to the current path.\n   * @param redirectUrl The url to redirect.\n   * @param component The component to be rendered in this path.\n   */\n  renderScreen = (condition, redirectUrl, component) => {\n    if(condition) {\n      return <Redirect to={redirectUrl} />\n    } else {\n      return component;\n    }\n  }\n\n  render() {\n    return (\n      <Router>\n        <Route exact path=\"/\" render={() => this.renderScreen(this.state.loggedIn, '/select', \n          <LoginScreen playerName={this.state.playerName} handleSubmit={this.handleLoginSubmit} handleChange={this.handleChange} />\n          )}/>\n        <Route exact path=\"/select\" component={SelectionScreen} />\n        <Route exact path=\"/create\" render={() => this.renderScreen(this.state.joinedRoom, '/lobby', \n          <CreateScreen roomName={this.state.roomName} handleSubmit={this.handleRoomSubmit} handleChange={this.handleChange} />\n          )} />\n        <Route exact path=\"/join\" render={() => this.renderScreen(this.state.joinedRoom, '/lobby',\n          <JoinScreen listenForRooms={this.listenForRooms} askForRooms={this.askForRooms} rooms={this.state.rooms} joinRoom={this.handleJoinRoom} />\n          )} />\n        <Route exact path=\"/lobby\" render={() => <LobbyScreen emitter={this.emitter} listener={this.listener} />} />\n        <Route exact path=\"/game\" render={() => <LobbyScreen emitter={this.emitter} listener={this.listener} />} />\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}