{"version":3,"sources":["logo.svg","LoginScreen/LoginScreen.js","SelectionScreen/SelectionScreen.js","CreateScreen/CreateScreen.js","RoomMiniature/RoomMiniature.js","JoinScreen/JoinScreen.js","LobbyScreen/LobbyScreen.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LoginScreen","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","name","target","value","handleSubmit","state","length","loggedIn","emitter","trim","preventDefault","renderRedirect","react_default","a","createElement","react_router","to","className","onSubmit","type","onChange","Component","SelectionScreen","react_router_dom","CreateScreen","createdRoom","RoomMiniature","handleClick","alert","room","roomName","onClick","numPlayers","JoinScreen","askForRooms","listenForRooms","listener","updateRooms","rooms","JSON","stringify","renderRooms","map","RoomMiniature_RoomMiniature","key","LobbyScreen","App","message","socket","emit","handler","on","updatePlayers","io","players","_this2","exact","path","render","LoginScreen_LoginScreen_LoginScreen","component","CreateScreen_CreateScreen_CreateScreen","JoinScreen_JoinScreen","LobbyScreen_LobbyScreen","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94cbd65d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport './LoginScreen.css'\r\n\r\nexport default class LoginScreen extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            loggedIn: false,\r\n        }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({ name: event.target.value });\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        if(this.state.name.length > 0) {\r\n            this.setState({ loggedIn: true });\r\n            this.props.emitter('addPlayer', this.state.name.trim())\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    renderRedirect = () => {\r\n        if(this.state.loggedIn) {\r\n            return <Redirect to=\"/select\" />\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"LoginScreen\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label className=\"Label\">\r\n                        What is your name?\r\n                        <input \r\n                            type=\"text\" \r\n                            className=\"Input\" \r\n                            value={this.state.name} \r\n                            onChange={this.handleChange} />\r\n                    </label>\r\n                </form>\r\n                {this.renderRedirect()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default class SelectionScreen extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Link to=\"/create\">CREAR</Link>\r\n                <br/>\r\n                <Link to=\"/join\">UNIRSE</Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport './CreateScreen.css'\r\n\r\nexport default class CreateScreen extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            createdRoom: false,\r\n        }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({ name: event.target.value });\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        this.setState({ createdRoom: true });\r\n        this.props.emitter('createRoom', this.state.name.trim())\r\n        event.preventDefault();\r\n    }\r\n\r\n    renderRedirect = () => {\r\n        if(this.state.createdRoom) {\r\n            return <Redirect to=\"/select\" />\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"CreateScreen\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label className=\"Label\">\r\n                        What is the room's name going to be?\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"Input\"\r\n                            value={this.state.name}\r\n                            onChange={this.handleChange} />\r\n                    </label>\r\n                </form>\r\n                {this.renderRedirect()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './RoomMiniature'\r\n\r\nexport default class RoomMiniature extends Component {\r\n    handleClick = () => {\r\n        alert('joined' + this.props.room.roomName)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"RoomMiniature\" onClick={this.handleClick}>\r\n                Name: {this.props.room.roomName} | Players: {this.props.room.numPlayers}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport RoomMiniature from '../RoomMiniature/RoomMiniature';\r\n\r\nexport default class JoinScreen extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          rooms: [],\r\n        }\r\n      }\r\n\r\n    componentDidMount() {\r\n        this.listenForRooms();\r\n        this.askForRooms();\r\n    }\r\n\r\n    /**\r\n     * Emits an event to trigger a response from the server.\r\n     */\r\n    askForRooms = () => {\r\n        this.props.emitter('listRooms');\r\n    }\r\n\r\n    /**\r\n     * Listens for a list of all the playable rooms.\r\n     */\r\n    listenForRooms = () => {\r\n        this.props.listener('listRooms', this.updateRooms)\r\n    }\r\n\r\n    /**\r\n     * Updates the component's state with the new rooms list.\r\n     */\r\n    updateRooms = rooms => {\r\n        this.props.emitter('logger', 'Rooms received' + JSON.stringify(rooms));\r\n        this.setState({ rooms });\r\n    }\r\n\r\n    /**\r\n     * Renders the rooms list.\r\n     */\r\n    renderRooms = () => {\r\n        return this.state.rooms.map((room) => <RoomMiniature room={room} key={room.roomName} />)  //<div key={index}>Name: {room.roomName} | Players: {room.numPlayers}</div>)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderRooms()}\r\n                <button onClick={this.askForRooms}>Reload</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class LobbyScreen extends Component {\r\n    componentDidMount() {\r\n        this.props.listener('joined')\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                LOBBY SCREEN\r\n                Players: {() => this.props.emitter()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","/* eslint-disable react/jsx-no-comment-textnodes */\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport logo from './logo.svg';\nimport './App.css';\nimport io from 'socket.io-client';\nimport LoginScreen from './LoginScreen/LoginScreen';\nimport SelectionScreen from './SelectionScreen/SelectionScreen';\nimport CreateScreen from './CreateScreen/CreateScreen';\nimport JoinScreen from './JoinScreen/JoinScreen';\nimport LobbyScreen from './LobbyScreen/LobbyScreen';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      socket: io(),\n      players: []\n    }\n  }\n\n  emitter = (event, message) => {\n    this.state.socket.emit(event, message);\n  }\n\n  listener = (event, handler) => {\n    this.state.socket.on(event, handler);\n  }\n\n  updatePlayers = () => {\n    //TODO Update players state for gameplay\n  }\n\n  render() {\n    return (\n      <Router>\n        <Route exact path=\"/\" render={() => <LoginScreen emitter={this.emitter} />} />\n        <Route exact path=\"/select\" component={SelectionScreen} />\n        <Route exact path=\"/create\" render={() => <CreateScreen emitter={this.emitter} />} />\n        <Route exact path=\"/join\" render={() => <JoinScreen emitter={this.emitter} listener={this.listener} />} />\n        <Route exact path=\"/lobby\" render={() => <LobbyScreen emitter={this.emitter} listener={this.listener}/>} />\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}